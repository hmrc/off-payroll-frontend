# Copyright 2018 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "frontend.conf"

appName="off-payroll-frontend"
appUrlPath = "check-employment-status-for-tax"
application.langs="en,cy"
application.router=prod.Routes
play.http.session.secure=true
play.http.session.httpOnly=true

ui.debug = false


play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientModule"

# An ApplicationLoader that uses Guice to bootstrap the application.
play.application.loader = "uk.gov.hmrc.play.bootstrap.ApplicationLoader"

# Primary entry point for all HTTP requests on Play applications
play.http.requestHandler = "uk.gov.hmrc.play.bootstrap.http.RequestHandler"

# Provides an implementation of AuditConnector. Use `uk.gov.hmrc.play.bootstrap.AuditModule` or create your own.
# An audit connector must be provided.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuditModule"

# Provides an implementation of MetricsFilter. Use `uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule` or create your own.
# A metric filter must be provided
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.graphite.GraphiteMetricsModule"

# Provides an implementation and configures all filters required by a Platform frontend microservice.
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.FrontendModule"

#Default filter
#play.http.filters = "uk.gov.hmrc.play.bootstrap.filters.FrontendFilters"

#Custom filter added onto the default
play.http.filters = "uk.gov.hmrc.offpayroll.Filters"

play.modules.enabled += "uk.gov.hmrc.offpayroll.Module"


# Custom error handler
play.http.errorHandler = "uk.gov.hmrc.offpayroll.OffPayrollFrontendErrorHandler"


play.filters.csrf.header.bypassHeaders {
  X-Requested-With = "*"
  Csrf-Token = "nocheck"
}

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/), by providing a logger.xml file in the conf directory .

# Root logger:
logger.root = ERROR

# Logger used by the framework:
logger.play = INFO

# Logger provided to your application:
logger.application = DEBUG


microservice {
    metrics {
        graphite {
            host = localhost
            port = 2003
            prefix = play.${appName}.
            enabled = false
        }
    }

    services {
      off-payroll-decision {
        host = localhost
        port = 9849
        version=1.5.0-final
      }
      pdf-generator-service {
        host = localhost
        port = 9852
      }

    }
}

metrics {
    name = ${appName}
    rateUnit = SECONDS
    durationUnit = SECONDS
    showSamples = true
    jvm = true
    enabled = true
}

auditing {
  enabled=false
  traceRequests=true
  consumer {
    baseUri {
      host = localhost
      port = 8100
    }
  }
}

languageSwitcher.fallback.url="#"

google-analytics {
  token=N/A
  host=auto
}

assets {
  version = "2.237.0"
  url = "http://localhost:9032/assets/"
}

contact-frontend {
  host = "http://localhost:9250"
}

# to learn why this was included, search for "Setting Security Headers in frontend services" on Confluence
play.filters.headers.contentSecurityPolicy= "default-src 'self' 'unsafe-inline' localhost:9032 localhost:9250 www.google-analytics.com data:"
